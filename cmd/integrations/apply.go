// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package integrations

import (
	"encoding/json"
	"errors"
	"fmt"
	"internal/apiclient"
	"internal/client/authconfigs"
	"internal/client/connections"
	"internal/client/integrations"
	"internal/client/sfdc"
	"internal/clilog"
	"io/fs"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/GoogleCloudPlatform/application-integration-management-toolkit/cmd/utils"
	"github.com/spf13/cobra"
)

// ApplyCmd a scaffold Integrations
var ApplyCmd = &cobra.Command{
	Use:   "apply",
	Short: "Apply configuration generated by scaffold to a region",
	Long:  "Apply configuration generated by scaffold to a region",
	Args: func(cmd *cobra.Command, args []string) (err error) {
		cmdProject := cmd.Flag("proj")
		cmdRegion := cmd.Flag("reg")

		if err = apiclient.SetRegion(cmdRegion.Value.String()); err != nil {
			return errors.Unwrap(err)
		}
		return apiclient.SetProjectID(cmdProject.Value.String())
	},
	RunE: func(cmd *cobra.Command, args []string) (err error) {

		if stat, err := os.Stat(folder); err != nil || !stat.IsDir() {
			return fmt.Errorf("problem with supplied path, %w", err)
		}

		rJSONFiles := regexp.MustCompile(`(\S*)\.json`)
		var integrationFolder = path.Join(folder, "src")
		var authconfigFolder = path.Join(folder, "authconfigs")
		var connectorsFolder = path.Join(folder, "connectors")
		var overridesFile = path.Join(folder, "overrides/overrides.json")
		var sfdcinstancesFolder = path.Join(folder, "sfdcinstances")
		var sfdcchannelsFolder = path.Join(folder, "sfdcchannels")

		var stat fs.FileInfo
		var integrationNames []string
		var overridesBytes []byte
		const sfdcNamingConvention = 2 // when file is split with _, the result must be 2

		apiclient.DisableCmdPrintHttpResponse()

		if stat, err = os.Stat(authconfigFolder); err == nil && stat.IsDir() {
			// create any authconfigs
			err = filepath.Walk(authconfigFolder, func(path string, info os.FileInfo, err error) error {
				if err != nil {
					return err
				}
				if !info.IsDir() {
					authConfigFile := filepath.Base(path)
					if rJSONFiles.MatchString(authConfigFile) {
						clilog.Info.Printf("Found configuration for authconfig: %s\n", authConfigFile)
						version, _ := authconfigs.Find(getFilenameWithoutExtension(authConfigFile), "")
						// create the authconfig only if the version was not found
						if version == "" {
							authConfigBytes, err := utils.ReadFile(path)
							if err != nil {
								return errors.Unwrap(err)
							}
							clilog.Info.Printf("Creating authconfig: %s\n", authConfigFile)
							if _, err = authconfigs.Create(authConfigBytes); err != nil {
								return errors.Unwrap(err)
							}
						} else {
							clilog.Info.Printf("Authconfig %s already exists\n", authConfigFile)
						}
					}
				}
				return nil
			})

			if err != nil {
				return
			}
		}

		if stat, err = os.Stat(connectorsFolder); err == nil && stat.IsDir() {
			// create any connectors
			err = filepath.Walk(connectorsFolder, func(path string, info os.FileInfo, err error) error {
				if err != nil {
					return err
				}
				if !info.IsDir() {
					connectionFile := filepath.Base(path)
					if rJSONFiles.MatchString(connectionFile) {
						clilog.Info.Printf("Found configuration for connection: %s\n", connectionFile)
						_, err = connections.Get(getFilenameWithoutExtension(connectionFile), "", true, false)
						// create the connection only if the connection is not found
						if err != nil {
							connectionBytes, err := utils.ReadFile(path)
							if err != nil {
								return errors.Unwrap(err)
							}
							clilog.Info.Printf("Creating connector: %s\n", connectionFile)

							if _, err = connections.Create(getFilenameWithoutExtension(connectionFile),
								connectionBytes,
								serviceAccountName,
								serviceAccountProject,
								encryptionKey,
								grantPermission,
								createSecret,
								wait); err != nil {
								return errors.Unwrap(err)
							}
						} else {
							clilog.Info.Printf("Connector %s already exists\n", connectionFile)
						}
					}
				}
				return nil
			})

			if err != nil {
				return
			}
		}

		if stat, err = os.Stat(sfdcinstancesFolder); err == nil && stat.IsDir() {
			// create any sfdc instances
			err = filepath.Walk(sfdcinstancesFolder, func(path string, info os.FileInfo, err error) error {
				if err != nil {
					return err
				}
				if !info.IsDir() {
					instanceFile := filepath.Base(path)
					if rJSONFiles.MatchString(instanceFile) {
						clilog.Info.Printf("Found configuration for sfdc instance: %s\n", instanceFile)
						_, err = sfdc.GetInstance(getFilenameWithoutExtension(instanceFile), true)
						// create the instance only if the sfdc instance is not found
						if err != nil {
							instanceBytes, err := utils.ReadFile(path)
							if err != nil {
								return err
							}
							clilog.Info.Printf("Creating sfdc instance: %s\n", instanceFile)
							_, err = sfdc.CreateInstanceFromContent(instanceBytes)
							if err != nil {
								return nil
							}
						} else {
							clilog.Info.Printf("sfdc instance %s already exists\n", instanceFile)
						}
					}
				}
				return nil
			})

			if err != nil {
				return
			}
		}

		if stat, err = os.Stat(sfdcchannelsFolder); err == nil && stat.IsDir() {
			// create any sfdc channels
			err = filepath.Walk(sfdcchannelsFolder, func(path string, info os.FileInfo, err error) error {
				if err != nil {
					return err
				}
				if !info.IsDir() {
					channelFile := filepath.Base(path)
					if rJSONFiles.MatchString(channelFile) {
						clilog.Info.Printf("Found configuration for sfdc channel: %s\n", channelFile)
						sfdcNames := strings.Split(getFilenameWithoutExtension(channelFile), "_")
						if len(sfdcNames) != sfdcNamingConvention {
							clilog.Warning.Printf("sfdc chanel file %s does not follow the naming "+
								"convention instanceName_channelName.json\n", channelFile)
							return nil
						}
						version, _, err := sfdc.FindChannel(sfdcNames[1], sfdcNames[0])
						// create the instance only if the sfdc channel is not found
						if err != nil {
							channelBytes, err := utils.ReadFile(path)
							if err != nil {
								return err
							}
							clilog.Info.Printf("Creating sfdc channel: %s\n", channelFile)
							_, err = sfdc.CreateChannelFromContent(version, channelBytes)
							if err != nil {
								return nil
							}
						} else {
							clilog.Info.Printf("sfdc channel %s already exists\n", channelFile)
						}
					}
				}
				return nil
			})

			if err != nil {
				return
			}
		}

		if _, err = os.Stat(overridesFile); err == nil {
			overridesBytes, err = utils.ReadFile(overridesFile)
			if err != nil {
				return err
			}
		}

		if len(overridesBytes) > 0 {
			clilog.Info.Printf("Found overrides file %s\n", overridesFile)
		}

		// get the integration file
		_ = filepath.Walk(integrationFolder, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if !info.IsDir() {
				integrationFile := filepath.Base(path)
				if rJSONFiles.MatchString(integrationFile) {
					clilog.Info.Printf("Found configuration for integration: %s\n", integrationFile)
					integrationNames = append(integrationNames, integrationFile)
				}
			}
			return nil
		})

		if len(integrationNames) > 0 {
			// get only the first file
			integrationBytes, err := utils.ReadFile(path.Join(integrationFolder, integrationNames[0]))
			if err != nil {
				return err
			}
			clilog.Info.Printf("Create integration %s\n", getFilenameWithoutExtension(integrationNames[0]))
			respBody, err := integrations.CreateVersion(getFilenameWithoutExtension(integrationNames[0]),
				integrationBytes, overridesBytes, "", userLabel, false)
			if err != nil {
				return errors.Unwrap(err)
			}
			version, err := getVersion(respBody)
			if err != nil {
				return err
			}
			clilog.Info.Printf("Publish integration %s with version %s\n",
				getFilenameWithoutExtension(integrationNames[0]), version)
			_, err = integrations.Publish(getFilenameWithoutExtension(integrationNames[0]), version)
			return err
		}

		clilog.Warning.Printf("No integration files were found\n")

		return

	},
}

var grantPermission, createSecret, wait bool
var serviceAccountName, serviceAccountProject, encryptionKey string

func init() {
	ApplyCmd.Flags().StringVarP(&folder, "folder", "f",
		"", "Folder containing scaffolding configuration")
	ApplyCmd.Flags().BoolVarP(&grantPermission, "grant-permission", "g",
		false, "Grant the service account permission to the GCP resource; default is false")
	ApplyCmd.Flags().StringVarP(&userLabel, "userlabel", "u",
		"", "Integration version userlabel")
	ApplyCmd.Flags().StringVarP(&serviceAccountName, "sa", "",
		"", "Service Account name for the connection")
	ApplyCmd.Flags().StringVarP(&serviceAccountProject, "sp", "",
		"", "Service Account Project for the connection. Default is the connection's project id")
	ApplyCmd.Flags().StringVarP(&encryptionKey, "encryption-keyid", "k",
		"", "Cloud KMS key for decrypting Auth Config; Format = locations/*/keyRings/*/cryptoKeys/*")
	ApplyCmd.Flags().BoolVarP(&createSecret, "create-secret", "",
		false, "Create Secret Manager secrets when creating the connection; default is false")
	ApplyCmd.Flags().BoolVarP(&wait, "wait", "",
		false, "Waits for the connector to finish, with success or error; default is false")

	_ = ApplyCmd.MarkFlagRequired("folder")
}

func getFilenameWithoutExtension(filname string) string {
	return strings.TrimSuffix(filname, filepath.Ext(filname))
}

func getVersion(respBody []byte) (version string, err error) {
	var jsonMap map[string]interface{}

	if err = json.Unmarshal(respBody, &jsonMap); err != nil {
		return "", errors.Unwrap(err)
	}

	if jsonMap["name"] == "" {
		return "", errors.New("version not found")
	}

	if version = filepath.Base(fmt.Sprintf("%s", jsonMap["name"])); version == "" {
		return "", errors.New("version not found")
	}
	return version, nil
}
